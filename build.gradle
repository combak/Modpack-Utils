buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/releases/"
        }
    }
    dependencies {
        classpath "org.eclipse.jgit:org.eclipse.jgit:4.0.0.201505050340-m2"
        classpath "net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT"
        classpath "org.ajoberstar:gradle-git:1.6.0"
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: "org.ajoberstar.grgit"

//Load properties
file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

//Get Github commit hash
task tagRelease {
  description = 'Tags the current head with the project\'s version.'
  doLast {
    grgit.tag.add {
      name = version
      message = "Release of ${version}"
    }
  }
}

//Version
version = "${config.minecraft.version}-${config.mod.version}-${grgit.head().abbreviatedId}"
group= "de.alaoli.games.minecraft.mods.modpackutils" 
archivesBaseName = "modpackutils"

//sourceCompatibility = org.gradle.api.JavaVersion.VERSION_1_8
//targetCompatibility = org.gradle.api.JavaVersion.VERSION_1_8

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    compile project(":common-library")
    compile "com.eclipsesource.minimal-json:minimal-json:${config.minimaljson.version}"
    shade "com.mashape.unirest:unirest-java:${config.unirest.version}"
}

minecraft {
    mappings = "${config.forge.mappings}"
    version = "${config.forge.version}"
    runDir = "run"
}


sourceSets { 
//    lib {
//        java {
//            srcDir "lib/common-library/src/main/java/"
//        }
//    }
    main {
        java {
            srcDir "src/main/java/"
        }
    }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    version = project.version
    configurations.shade.copyRecursive().setTransitive(false).each { artifact -> from (zipTree(artifact)) }
}
